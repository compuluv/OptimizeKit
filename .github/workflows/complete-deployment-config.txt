# .github/workflows/deploy.yml
name: Deploy OptimizeKit

on:
  push:
    tags:
      - "v*"
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Run tests
        run: pnpm test
      
      - name: Lint code
        run: pnpm lint

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Build apps
        run: pnpm build
      
      - name: Deploy to Vercel (Landing)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_LANDING }}
          working-directory: ./apps/landing
      
      - name: Deploy to Vercel (Dashboard)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_DASHBOARD }}
          working-directory: ./apps/dashboard
      
      - name: Publish JS SDK to NPM
        run: |
          cd packages/sdk-js
          npm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
          npm publish
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Publish Python SDK to PyPI
        run: |
          cd packages/sdk-py
          pip install build twine
          python -m build
          twine upload dist/* --username __token__ --password ${{ secrets.PYPI_TOKEN }}

---

# docker-compose.yml
version: '3.8'

services:
  supabase:
    image: supabase/postgres:latest
    environment:
      POSTGRES_DB: optimizekit
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  dashboard:
    build:
      context: ./apps/dashboard
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@supabase:5432/optimizekit
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=your-secret-key
      - NEXTAUTH_URL=http://localhost:3000
    depends_on:
      - supabase
      - redis

  landing:
    build:
      context: ./apps/landing
      dockerfile: Dockerfile
    ports:
      - "3001:3000"

volumes:
  postgres_data:
  redis_data:

---

# supabase/migrations/001_initial_schema.sql

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users table (extends Supabase auth.users)
CREATE TABLE public.profiles (
  id UUID REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  full_name TEXT,
  avatar_url TEXT,
  plan TEXT DEFAULT 'free' CHECK (plan IN ('free', 'pro', 'enterprise')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- API Keys table
CREATE TABLE public.api_keys (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  key_hash TEXT NOT NULL UNIQUE,
  key_prefix TEXT NOT NULL,
  plan TEXT DEFAULT 'free' CHECK (plan IN ('free', 'pro', 'enterprise')),
  usage_current INTEGER DEFAULT 0,
  usage_limit INTEGER DEFAULT 10000,
  last_used_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_active BOOLEAN DEFAULT TRUE
);

-- Projects table
CREATE TABLE public.projects (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  description TEXT,
  settings JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Optimization requests table
CREATE TABLE public.optimizations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  api_key_id UUID REFERENCES public.api_keys(id) ON DELETE CASCADE NOT NULL,
  project_id UUID REFERENCES public.projects(id) ON DELETE SET NULL,
  original_prompt TEXT NOT NULL,
  optimized_prompt TEXT NOT NULL,
  strategy TEXT NOT NULL,
  model TEXT NOT NULL,
  confidence DECIMAL(3,2),
  improvement_score DECIMAL(5,2),
  user_context JSONB DEFAULT '{}',
  metadata JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User preferences table
CREATE TABLE public.user_preferences (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  preference_type TEXT NOT NULL,
  preference_value JSONB NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, preference_type)
);

-- A/B tests table
CREATE TABLE public.ab_tests (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  variations JSONB NOT NULL,
  config JSONB NOT NULL,
  results JSONB DEFAULT '{}',
  status TEXT DEFAULT 'running' CHECK (status IN ('draft', 'running', 'completed', 'paused')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Usage analytics table
CREATE TABLE public.usage_analytics (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  api_key_id UUID REFERENCES public.api_keys(id) ON DELETE CASCADE,
  event_type TEXT NOT NULL,
  event_data JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for better performance
CREATE INDEX idx_api_keys_user_id ON public.api_keys(user_id);
CREATE INDEX idx_api_keys_key_hash ON public.api_keys(key_hash);
CREATE INDEX idx_optimizations_api_key_id ON public.optimizations(api_key_id);
CREATE INDEX idx_optimizations_created_at ON public.optimizations(created_at);
CREATE INDEX idx_projects_user_id ON public.projects(user_id);
CREATE INDEX idx_usage_analytics_user_id ON public.usage_analytics(user_id);
CREATE INDEX idx_usage_analytics_created_at ON public.usage_analytics(created_at);

-- Row Level Security (RLS)
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.api_keys ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.optimizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_preferences ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ab_tests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.usage_analytics ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view own profile" ON public.profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can view own API keys" ON public.api_keys
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own projects" ON public.projects
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "API key owners can view optimizations" ON public.optimizations
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.api_keys 
      WHERE api_keys.id = optimizations.api_key_id 
      AND api_keys.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can manage own preferences" ON public.user_preferences
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own A/B tests" ON public.ab_tests
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view own analytics" ON public.usage_analytics
  FOR SELECT USING (auth.uid() = user_id);

-- Functions
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $
BEGIN
  INSERT INTO public.profiles (id, email, full_name, avatar_url)
  VALUES (
    NEW.id,
    NEW.email,
    NEW.raw_user_meta_data->>'full_name',
    NEW.raw_user_meta_data->>'avatar_url'
  );
  RETURN NEW;
END;
$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger for new user creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Function to update API key usage
CREATE OR REPLACE FUNCTION public.increment_api_usage(key_hash TEXT)
RETURNS BOOLEAN AS $
DECLARE
  current_usage INTEGER;
  usage_limit INTEGER;
BEGIN
  SELECT usage_current, usage_limit INTO current_usage, usage_limit
  FROM public.api_keys
  WHERE key_hash = increment_api_usage.key_hash AND is_active = TRUE;
  
  IF NOT FOUND THEN
    RETURN FALSE;
  END IF;
  
  IF current_usage >= usage_limit THEN
    RETURN FALSE;
  END IF;
  
  UPDATE public.api_keys
  SET usage_current = usage_current + 1,
      last_used_at = NOW()
  WHERE key_hash = increment_api_usage.key_hash;
  
  RETURN TRUE;
END;
$ LANGUAGE plpgsql SECURITY DEFINER;

---

# packages/sdk-js/package.json
{
  "name": "optimizekit",
  "version": "1.0.0",
  "description": "AI prompt optimization SDK for JavaScript/TypeScript",
  "main": "dist/index.js",
  "module": "dist/index.esm.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "rollup -c",
    "dev": "rollup -c -w",
    "test": "jest",
    "lint": "eslint src --ext .ts,.tsx",
    "prepublishOnly": "pnpm build"
  },
  "keywords": [
    "ai",
    "prompt",
    "optimization",
    "gpt",
    "claude",
    "gemini",
    "llm"
  ],
  "author": "OptimizeKit Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/optimizekit/optimizekit.git",
    "directory": "packages/sdk-js"
  },
  "dependencies": {
    "axios": "^1.6.0"
  },
  "devDependencies": {
    "@rollup/plugin-typescript": "^11.1.5",
    "@types/jest": "^29.5.8",
    "eslint": "^8.53.0",
    "jest": "^29.7.0",
    "rollup": "^4.5.0",
    "typescript": "^5.2.2"
  }
}

---

# packages/sdk-py/setup.py
from setuptools import setup, find_packages

with open("README.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

setup(
    name="optimizekit",
    version="1.0.0",
    author="OptimizeKit Team",
    author_email="team@optimizekit.dev",
    description="AI prompt optimization SDK for Python",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/optimizekit/optimizekit",
    project_urls={
        "Bug Tracker": "https://github.com/optimizekit/optimizekit/issues",
        "Documentation": "https://docs.optimizekit.dev",
    },
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "Topic :: Scientific/Engineering :: Artificial Intelligence",
    ],
    packages=find_packages(),
    python_requires=">=3.8",
    install_requires=[
        "requests>=2.25.0",
        "pydantic>=1.8.0",
        "typing-extensions>=4.0.0",
    ],
    extras_require={
        "async": ["aiohttp>=3.8.0"],
        "dev": [
            "pytest>=7.0.0",
            "pytest-asyncio>=0.21.0",
            "black>=22.0.0",
            "flake8>=5.0.0",
            "mypy>=1.0.0",
        ],
    },
)

---

# apps/dashboard/Dockerfile
FROM node:18-alpine AS base
WORKDIR /app
COPY package.json pnpm-lock.yaml ./
RUN npm install -g pnpm && pnpm install --frozen-lockfile

FROM base AS builder
COPY . .
RUN pnpm build

FROM node:18-alpine AS runner
WORKDIR /app
ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs
EXPOSE 3000
ENV PORT 3000

CMD ["node", "server.js"]

---

# scripts/setup.sh
#!/bin/bash

# OptimizeKit Setup Script
set -e

echo "🚀 Setting up OptimizeKit development environment..."

# Check if required tools are installed
command -v node >/dev/null 2>&1 || { echo ❌ "Node.js is required but not installed."; exit 1; }
command -v pnpm >/dev/null 2>&1 || { echo "📦 Installing pnpm..."; npm install -g pnpm; }
command -v docker >/dev/null 2>&1 || { echo "❌ Docker is required but not installed."; exit 1; }

# Install dependencies
echo "📦 Installing dependencies..."
pnpm install

# Setup environment files
echo "⚙️ Setting up environment files..."

# Dashboard environment
cat > apps/dashboard/.env.local << EOF
# Database
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/optimizekit
DIRECT_URL=postgresql://postgres:postgres@localhost:5432/optimizekit

# Supabase
NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key

# NextAuth
NEXTAUTH_SECRET=your-nextauth-secret
NEXTAUTH_URL=http://localhost:3000

# Stripe (optional)
STRIPE_SECRET_KEY=sk_test_...
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...

# OptimizeKit API
OPTIMIZEKIT_API_URL=http://localhost:8000
OPTIMIZEKIT_ADMIN_KEY=your-admin-key
EOF

# Landing page environment
cat > apps/landing/.env.local << EOF
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_DASHBOARD_URL=http://localhost:3000
EOF

# Start services
echo "🐳 Starting Docker services..."
docker-compose up -d

# Wait for services to be ready
echo "⏳ Waiting for services to be ready..."
sleep 10

# Run database migrations
echo "🔄 Running database migrations..."
cd apps/dashboard && pnpm db:migrate && cd ../..

# Seed database with sample data
echo "🌱 Seeding database..."
cat > seed.sql << EOF
-- Insert sample user
INSERT INTO auth.users (id, email, email_confirmed_at, created_at, updated_at)
VALUES (
  '550e8400-e29b-41d4-a716-446655440000',
  'demo@optimizekit.dev',
  NOW(),
  NOW(),
  NOW()
) ON CONFLICT (id) DO NOTHING;

-- Insert sample API key
INSERT INTO public.api_keys (user_id, name, key_hash, key_prefix, plan, usage_limit)
VALUES (
  '550e8400-e29b-41d4-a716-446655440000',
  'Demo API Key',
  'hashed_demo_key_123',
  'ok_demo_',
  'pro',
  50000
) ON CONFLICT (key_hash) DO NOTHING;

-- Insert sample project
INSERT INTO public.projects (user_id, name, description)
VALUES (
  '550e8400-e29b-41d4-a716-446655440000',
  'Demo Project',
  'Sample project for testing OptimizeKit features'
) ON CONFLICT DO NOTHING;
EOF

docker exec optimizekit-supabase-1 psql -U postgres -d optimizekit -f /dev/stdin < seed.sql
rm seed.sql

echo "✅ Setup complete!"
echo ""
echo "🎉 OptimizeKit is ready for development!"
echo ""
echo "📍 Available services:"
echo "   - Dashboard: http://localhost:3000"
echo "   - Landing:   http://localhost:3001"
echo "   - Database:  postgresql://postgres:postgres@localhost:5432/optimizekit"
echo "   - Redis:     redis://localhost:6379"
echo ""
echo "🚀 To start development:"
echo "   pnpm dev"
echo ""
echo "📚 Next steps:"
echo "   1. Configure your environment variables"
echo "   2. Set up Supabase project (optional for production)"
echo "   3. Configure Stripe for payments (optional)"
echo "   4. Deploy to your preferred platform"

---

# scripts/deploy.sh
#!/bin/bash

# OptimizeKit Deployment Script
set -e

echo "🚀 Deploying OptimizeKit..."

# Build all packages
echo "🔨 Building packages..."
pnpm build

# Run tests
echo "🧪 Running tests..."
pnpm test

# Deploy to production
echo "📦 Deploying to production..."

# Deploy landing page
echo "🌐 Deploying landing page..."
cd apps/landing
vercel --prod
cd ../..

# Deploy dashboard
echo "📊 Deploying dashboard..."
cd apps/dashboard
vercel --prod
cd ../..

# Publish SDKs
echo "📚 Publishing SDKs..."

# Publish JavaScript SDK
cd packages/sdk-js
npm publish
cd ../..

# Publish Python SDK
cd packages/sdk-py
python setup.py sdist bdist_wheel
twine upload dist/*
cd ../..

echo "✅ Deployment complete!"
echo ""
echo "🎉 OptimizeKit has been successfully deployed!"
echo ""
echo "📍 Live URLs:"
echo "   - Landing: https://optimizekit.dev"
echo "   - Dashboard: https://app.optimizekit.dev"
echo "   - JS SDK: https://npmjs.com/package/optimizekit"
echo "   - Python SDK: https://pypi.org/project/optimizekit/"

---

# pnpm-workspace.yaml
packages:
  - 'apps/*'
  - 'packages/*'

---

# .gitignore
# Dependencies
node_modules/
.pnpm-debug.log*

# Environment files
.env
.env.local
.env.production
.env.development

# Build outputs
.next/
dist/
build/

# Cache directories
.cache/
.parcel-cache/

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Docker
.dockerignore

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

---

# README.md (Root)
# OptimizeKit

> All-in-one SDK and dashboard for AI prompt optimization, model selection, and user personalization.

[![NPM Version](https://img.shields.io/npm/v/optimizekit)](https://npmjs.com/package/optimizekit)
[![PyPI Version](https://img.shields.io/pypi/v/optimizekit)](https://pypi.org/project/optimizekit/)
[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)

## Features

- 🧠 **Smart Prompt Optimization** - 5 optimization strategies with 94%+ improvement rate
- 🎯 **Intelligent Model Selection** - Choose the best AI model for your specific needs
- 👤 **Personalization Engine** - Adaptive prompts that learn from user behavior
- 📊 **A/B Testing** - Built-in experimentation framework
- 📈 **Analytics Dashboard** - Comprehensive insights and usage metrics
- 🔌 **Multi-Platform SDKs** - JavaScript, Python, and mobile support

## Quick Start

### JavaScript/TypeScript
```bash
npm install optimizekit
```

```javascript
import OptimizeKit from 'optimizekit';

const kit = new OptimizeKit('your-api-key');

const result = await kit.optimizePrompt(
  'explain quantum computing',
  { strategy: 'clarity', model: 'gpt-4' }
);

console.log(result.optimizedPrompt);
```

### Python
```bash
pip install optimizekit
```

```python
from optimizekit import OptimizeKit

kit = OptimizeKit('your-api-key')

result = kit.optimize_prompt(
    'explain quantum computing',
    strategy='clarity',
    model='gpt-4'
)

print(result.optimized_prompt)
```

## Development

```bash
# Clone the repository
git clone https://github.com/optimizekit/optimizekit.git
cd optimizekit

# Setup development environment
chmod +x scripts/setup.sh
./scripts/setup.sh

# Start development
pnpm dev
```

## Deployment

```bash
# Deploy to production
chmod +x scripts/deploy.sh
./scripts/deploy.sh
```

## License

MIT © OptimizeKit Team